function [adigatorFunInfo, adigatorOutputs] = adigatortempfunc7(adigatorFunInfo,adigatorInputs)
[flag, adigatorFunInfo, adigatorInputs] = adigatorFunctionInitialize(7,adigatorFunInfo,adigatorInputs);
if flag; adigatorOutputs = adigatorInputs; return; end;
gamma = adigatorInputs{1};
r = adigatorInputs{2};
v = adigatorInputs{3};
auxdata = adigatorInputs{4};
zeta = adigatorInputs{5};
phi = adigatorInputs{6};
xi = adigatorInputs{7};
alpha = adigatorInputs{8};
eta = adigatorInputs{9};
throttle = adigatorInputs{10};
mFuel = adigatorInputs{11};
nargin = 11; nargout = 13;interp = auxdata.interp;
interp = adigatorVarAnalyzer('interp = auxdata.interp;',interp,'interp',0);
adigatorVarAnalyzer('% =======================================================');
adigatorVarAnalyzer('% Vehicle Model');
adigatorVarAnalyzer('% =======================================================');
A = auxdata.A;
A = adigatorVarAnalyzer('A = auxdata.A;',A,'A',0);
adigatorVarAnalyzer('% eta = .0*ones(1,length(time)); % Roll angle');
adigatorVarAnalyzer('% eta = 0.3 - 0.0001*time;');
adigatorVarAnalyzer('%Gravity');
g = 9.81;
g = adigatorVarAnalyzer('g = 9.81;',g,'g',0);
adigatorVarAnalyzer('% dt_array = time(2:end)-time(1:end-1); % Time change between each node pt');
alt = r - auxdata.Re;
alt = adigatorVarAnalyzer('alt = r - auxdata.Re;',alt,'alt',0);
m = auxdata.mass+mFuel;
m = adigatorVarAnalyzer('m = auxdata.mass+mFuel;',m,'m',0);
adigatorVarAnalyzer('%===================================================');
adigatorVarAnalyzer('%');
adigatorVarAnalyzer('% SECOND STAGE');
adigatorVarAnalyzer('%');
adigatorVarAnalyzer('%===================================================');
adigatorVarAnalyzer('%======================================================');
adigatorVarAnalyzer('% speedOfSound = spline(auxdata.Atmosphere(:,1),auxdata.Atmosphere(:,5),alt);');
adigatorVarAnalyzer('% density = spline(auxdata.Atmosphere(:,1),auxdata.Atmosphere(:,4),alt);');
adigatorVarAnalyzer('% D=D*2;');
adigatorVarAnalyzer('% L=L*3;');
adigatorVarAnalyzer('%% Flow =============================================================');
c = ppval(interp.c_spline,alt);
c = adigatorVarAnalyzer('c = ppval(interp.c_spline,alt);',c,'c',0);
mach = v./c;
mach = adigatorVarAnalyzer('mach = v./c;',mach,'mach',0);
rho = ppval(interp.rho_spline,alt);
rho = adigatorVarAnalyzer('rho = ppval(interp.rho_spline,alt);',rho,'rho',0);
q = 0.5 * rho .* (v .^2);
q = adigatorVarAnalyzer('q = 0.5 * rho .* (v .^2);',q,'q',0);
M = v./c;
M = adigatorVarAnalyzer('M = v./c;',M,'M',0);
T0 = ppval(interp.T0_spline, alt);
T0 = adigatorVarAnalyzer('T0 = ppval(interp.T0_spline, alt);',T0,'T0',0);
P0 = ppval(interp.P0_spline, alt);
P0 = adigatorVarAnalyzer('P0 = ppval(interp.P0_spline, alt);',P0,'P0',0);
adigatorVarAnalyzer('%% Aerodynamics');
adigatorVarAnalyzer('% interpolate coefficients');
% Call to User Function rad2deg --- (FunID 4)
cadainput4_1 = alpha;
cadainput4_1 = adigatorVarAnalyzer('cadainput4_1 = alpha;',cadainput4_1,'cadainput4_1',0);
adigatorInputs = {cadainput4_1};
[adigatorFunInfo, adigatorOutputs] = adigatortempfunc4(adigatorFunInfo,adigatorInputs);
cadaoutput4_1 = adigatorOutputs{1};
Cd = auxdata.interp.Cd_spline(mach,cadaoutput4_1);
Cd = adigatorVarAnalyzer('Cd = auxdata.interp.Cd_spline(mach,cadaoutput4_1);',Cd,'Cd',0);
% Call to User Function rad2deg --- (FunID 4)
cadainput4_1 = alpha;
cadainput4_1 = adigatorVarAnalyzer('cadainput4_1 = alpha;',cadainput4_1,'cadainput4_1',0);
adigatorInputs = {cadainput4_1};
[adigatorFunInfo, adigatorOutputs] = adigatortempfunc4(adigatorFunInfo,adigatorInputs);
cadaoutput4_1 = adigatorOutputs{1};
Cl = auxdata.interp.Cl_spline(mach,cadaoutput4_1);
Cl = adigatorVarAnalyzer('Cl = auxdata.interp.Cl_spline(mach,cadaoutput4_1);',Cl,'Cl',0);
adigatorVarAnalyzer('%%%% Compute the drag and lift:');
D = 0.5*Cd.*A.*rho.*v.^2;
D = adigatorVarAnalyzer('D = 0.5*Cd.*A.*rho.*v.^2;',D,'D',0);
L = 0.5*Cl.*A.*rho.*v.^2;
L = adigatorVarAnalyzer('L = 0.5*Cl.*A.*rho.*v.^2;',L,'L',0);
adigatorVarAnalyzer('%% Thrust');
% Call to User Function RESTM12int --- (FunID 5)
cadainput5_1 = M;
cadainput5_1 = adigatorVarAnalyzer('cadainput5_1 = M;',cadainput5_1,'cadainput5_1',0);
cadainput5_2 = alpha;
cadainput5_2 = adigatorVarAnalyzer('cadainput5_2 = alpha;',cadainput5_2,'cadainput5_2',0);
cadainput5_3 = auxdata;
cadainput5_3 = adigatorVarAnalyzer('cadainput5_3 = auxdata;',cadainput5_3,'cadainput5_3',0);
cadainput5_4 = T0;
cadainput5_4 = adigatorVarAnalyzer('cadainput5_4 = T0;',cadainput5_4,'cadainput5_4',0);
cadainput5_5 = P0;
cadainput5_5 = adigatorVarAnalyzer('cadainput5_5 = P0;',cadainput5_5,'cadainput5_5',0);
adigatorInputs = {cadainput5_1;cadainput5_2;cadainput5_3;cadainput5_4;cadainput5_5};
[adigatorFunInfo, adigatorOutputs] = adigatortempfunc5(adigatorFunInfo,adigatorInputs);
cadaoutput5_1 = adigatorOutputs{1};
Isp = cadaoutput5_1;
Isp = adigatorVarAnalyzer('Isp = cadaoutput5_1;',Isp,'Isp',0);
cadaoutput5_2 = adigatorOutputs{2};
Fueldt = cadaoutput5_2;
Fueldt = adigatorVarAnalyzer('Fueldt = cadaoutput5_2;',Fueldt,'Fueldt',0);
cadaoutput5_3 = adigatorOutputs{3};
eq = cadaoutput5_3;
eq = adigatorVarAnalyzer('eq = cadaoutput5_3;',eq,'eq',0);
adigatorVarAnalyzer('% for i = 1:length(r)');
adigatorVarAnalyzer('%   if q(i) < 20000');
adigatorVarAnalyzer('%         Isp(i) = Isp(i)*gaussmf(q(i),[1000,20000]);');
adigatorVarAnalyzer('%   end');
adigatorVarAnalyzer('% end');
% Call to User Function gaussmf --- (FunID 2)
cadainput2_1 = q(q<20000);
cadainput2_1 = adigatorVarAnalyzer('cadainput2_1 = q(q<20000);',cadainput2_1,'cadainput2_1',0);
cadainput2_2 = [1000,20000];
cadainput2_2 = adigatorVarAnalyzer('cadainput2_2 = [1000,20000];',cadainput2_2,'cadainput2_2',0);
adigatorInputs = {cadainput2_1;cadainput2_2};
[adigatorFunInfo, adigatorOutputs] = adigatortempfunc2(adigatorFunInfo,adigatorInputs);
cadaoutput2_1 = adigatorOutputs{1};
if ~exist('Isp','var'); Isp = cadastruct([],'Isp',[],0); end
Isp(q<20000) = Isp(q<20000).*cadaoutput2_1;
Isp = adigatorVarAnalyzer('Isp(q<20000) = Isp(q<20000).*cadaoutput2_1;',Isp,'Isp',1);
if ~exist('Fueldt','var'); Fueldt = cadastruct([],'Fueldt',[],0); end
Fueldt(M<5.1) = 0;
Fueldt = adigatorVarAnalyzer('Fueldt(M<5.1) = 0;',Fueldt,'Fueldt',1);
Fueldt = Fueldt.*throttle;
Fueldt = adigatorVarAnalyzer('Fueldt = Fueldt.*throttle;',Fueldt,'Fueldt',0);
% Call to User Function deg2rad --- (FunID 3)
cadainput3_1 = alpha;
cadainput3_1 = adigatorVarAnalyzer('cadainput3_1 = alpha;',cadainput3_1,'cadainput3_1',0);
adigatorInputs = {cadainput3_1};
[adigatorFunInfo, adigatorOutputs] = adigatortempfunc3(adigatorFunInfo,adigatorInputs);
cadaoutput3_1 = adigatorOutputs{1};
T = Isp.*Fueldt*9.81.*cos(cadaoutput3_1);
T = adigatorVarAnalyzer('T = Isp.*Fueldt*9.81.*cos(cadaoutput3_1);',T,'T',0);
adigatorVarAnalyzer('% fuelchange_array = -Fueldt(1:end-1).*dt_array ;');
adigatorVarAnalyzer('%');
adigatorVarAnalyzer('% dfuel = sum(fuelchange_array); %total change in ''fuel'' this is negative');
adigatorVarAnalyzer('%Rotational Coordinates =================================================');
adigatorVarAnalyzer('%=================================================');
adigatorVarAnalyzer('% i= 1;');
adigatorVarAnalyzer('%');
adigatorVarAnalyzer('% [rdot(i),xidot(i),phidot(i),gammadot(i),a(i),zetadot(i)] = RotCoordsReturn(r(i),xi(i),phi(i),gamma(i),v(i),zeta(i),L(i),D(i),T(i),m,alpha(i),eta(i));');
adigatorVarAnalyzer('%');
adigatorVarAnalyzer('% for i = 2:length(r)');
adigatorVarAnalyzer('% [rdot(i),xidot(i),phidot(i),gammadot(i),a(i),zetadot(i)] = RotCoordsReturn(r(i),xi(i),phi(i),gamma(i),v(i),zeta(i),L(i),D(i),T(i),m,alpha(i),eta(i));');
adigatorVarAnalyzer('% end');
% Call to User Function RotCoordsReturn --- (FunID 6)
cadainput6_1 = r;
cadainput6_1 = adigatorVarAnalyzer('cadainput6_1 = r;',cadainput6_1,'cadainput6_1',0);
cadainput6_2 = xi;
cadainput6_2 = adigatorVarAnalyzer('cadainput6_2 = xi;',cadainput6_2,'cadainput6_2',0);
cadainput6_3 = phi;
cadainput6_3 = adigatorVarAnalyzer('cadainput6_3 = phi;',cadainput6_3,'cadainput6_3',0);
cadainput6_4 = gamma;
cadainput6_4 = adigatorVarAnalyzer('cadainput6_4 = gamma;',cadainput6_4,'cadainput6_4',0);
cadainput6_5 = v;
cadainput6_5 = adigatorVarAnalyzer('cadainput6_5 = v;',cadainput6_5,'cadainput6_5',0);
cadainput6_6 = zeta;
cadainput6_6 = adigatorVarAnalyzer('cadainput6_6 = zeta;',cadainput6_6,'cadainput6_6',0);
cadainput6_7 = L;
cadainput6_7 = adigatorVarAnalyzer('cadainput6_7 = L;',cadainput6_7,'cadainput6_7',0);
cadainput6_8 = D;
cadainput6_8 = adigatorVarAnalyzer('cadainput6_8 = D;',cadainput6_8,'cadainput6_8',0);
cadainput6_9 = T;
cadainput6_9 = adigatorVarAnalyzer('cadainput6_9 = T;',cadainput6_9,'cadainput6_9',0);
cadainput6_10 = m;
cadainput6_10 = adigatorVarAnalyzer('cadainput6_10 = m;',cadainput6_10,'cadainput6_10',0);
cadainput6_11 = alpha;
cadainput6_11 = adigatorVarAnalyzer('cadainput6_11 = alpha;',cadainput6_11,'cadainput6_11',0);
cadainput6_12 = eta;
cadainput6_12 = adigatorVarAnalyzer('cadainput6_12 = eta;',cadainput6_12,'cadainput6_12',0);
adigatorInputs = {cadainput6_1;cadainput6_2;cadainput6_3;cadainput6_4;cadainput6_5;cadainput6_6;cadainput6_7;cadainput6_8;cadainput6_9;cadainput6_10;cadainput6_11;cadainput6_12};
[adigatorFunInfo, adigatorOutputs] = adigatortempfunc6(adigatorFunInfo,adigatorInputs);
cadaoutput6_1 = adigatorOutputs{1};
rdot = cadaoutput6_1;
rdot = adigatorVarAnalyzer('rdot = cadaoutput6_1;',rdot,'rdot',0);
cadaoutput6_2 = adigatorOutputs{2};
xidot = cadaoutput6_2;
xidot = adigatorVarAnalyzer('xidot = cadaoutput6_2;',xidot,'xidot',0);
cadaoutput6_3 = adigatorOutputs{3};
phidot = cadaoutput6_3;
phidot = adigatorVarAnalyzer('phidot = cadaoutput6_3;',phidot,'phidot',0);
cadaoutput6_4 = adigatorOutputs{4};
gammadot = cadaoutput6_4;
gammadot = adigatorVarAnalyzer('gammadot = cadaoutput6_4;',gammadot,'gammadot',0);
cadaoutput6_5 = adigatorOutputs{5};
a = cadaoutput6_5;
a = adigatorVarAnalyzer('a = cadaoutput6_5;',a,'a',0);
cadaoutput6_6 = adigatorOutputs{6};
zetadot = cadaoutput6_6;
zetadot = adigatorVarAnalyzer('zetadot = cadaoutput6_6;',zetadot,'zetadot',0);
adigatorVarAnalyzer('% Aero Data =============================================================');
adigatorVarAnalyzer('% c = spline( auxdata.Atmosphere(:,1),  auxdata.Atmosphere(:,5), alt); % Calculate speed of sound using atmospheric data');
adigatorVarAnalyzer('%');
adigatorVarAnalyzer('% rho = spline( auxdata.Atmosphere(:,1),  auxdata.Atmosphere(:,4), alt); % Calculate density using atmospheric data');
q = 0.5 * rho .* (v .^2);
q = adigatorVarAnalyzer('q = 0.5 * rho .* (v .^2);',q,'q',0);
M = v./c;
M = adigatorVarAnalyzer('M = v./c;',M,'M',0);
adigatorVarAnalyzer('%-heating---------------------------');
adigatorVarAnalyzer('% kappa = 1.7415e-4;');
adigatorVarAnalyzer('% Rn = 1; %effective nose radius (m) (need to change this, find actual value)');
adigatorVarAnalyzer('%');
adigatorVarAnalyzer('% heating_rate = kappa*sqrt(rho./Rn).*v.^3; %watts');
adigatorVarAnalyzer('%');
adigatorVarAnalyzer('% Q = zeros(1,length(time));');
adigatorVarAnalyzer('% Q(1) = 0;');
adigatorVarAnalyzer('%');
adigatorVarAnalyzer('% for i = 1:length(dt_array)');
adigatorVarAnalyzer('%     Q(i+1) = heating_rate(i)*dt_array(i) + Q(i);');
adigatorVarAnalyzer('% end');
v_H = v.*cos(gamma);
v_H = adigatorVarAnalyzer('v_H = v.*cos(gamma);',v_H,'v_H',0);
adigatorVarAnalyzer('% =========================================================================');
adigatorOutputs = {rdot;xidot;phidot;gammadot;a;zetadot;q;M;D;rho;L;Fueldt;T};
[adigatorFunInfo, adigatorOutputs] = adigatorFunctionEnd(7,adigatorFunInfo,adigatorOutputs);
