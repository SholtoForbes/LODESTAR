% This code was generated using ADiGator version 1.4
% ©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function phaseout = rlvEntryContinuousADiGatorGrd(input)
global ADiGator_rlvEntryContinuousADiGatorGrd
if isempty(ADiGator_rlvEntryContinuousADiGatorGrd); ADiGator_LoadData(); end
Gator1Data = ADiGator_rlvEntryContinuousADiGatorGrd.rlvEntryContinuousADiGatorGrd.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % ---------------------------------------------------%
%User Line: % ------ Extract Each Component of the State ------- %
%User Line: % ---------------------------------------------------%
rad.dV = input.phase.state.dV(:,1);
rad.f = input.phase.state.f(:,1);
%User Line: rad  = input.phase.state(:,1);
lon.dV = input.phase.state.dV(:,2);
lon.f = input.phase.state.f(:,2);
%User Line: lon  = input.phase.state(:,2);
lat.dV = input.phase.state.dV(:,3);
lat.f = input.phase.state.f(:,3);
%User Line: lat  = input.phase.state(:,3);
v.dV = input.phase.state.dV(:,4);
v.f = input.phase.state.f(:,4);
%User Line: v    = input.phase.state(:,4);
fpa.dV = input.phase.state.dV(:,5);
fpa.f = input.phase.state.f(:,5);
%User Line: fpa  = input.phase.state(:,5);
azi.dV = input.phase.state.dV(:,6);
azi.f = input.phase.state.f(:,6);
%User Line: azi  = input.phase.state(:,6);
aoa.dV = input.phase.control.dV(:,1);
aoa.f = input.phase.control.f(:,1);
%User Line: aoa  = input.phase.control(:,1);
bank.dV = input.phase.control.dV(:,2);
bank.f = input.phase.control.f(:,2);
%User Line: bank = input.phase.control(:,2);
%User Line: % ---------------------------------------------------%
%User Line: % ------- Compute the Aerodynamic Quantities --------%
%User Line: % ---------------------------------------------------%
cd0.f = input.auxdata.cd(1);
%User Line: cd0      = input.auxdata.cd(1);
cd1.f = input.auxdata.cd(2);
%User Line: cd1      = input.auxdata.cd(2);
cd2.f = input.auxdata.cd(3);
%User Line: cd2      = input.auxdata.cd(3);
cl0.f = input.auxdata.cl(1);
%User Line: cl0      = input.auxdata.cl(1);
cl1.f = input.auxdata.cl(2);
%User Line: cl1      = input.auxdata.cl(2);
mu = input.auxdata.mu;
%User Line: mu       = input.auxdata.mu;
rho0 = input.auxdata.rho0;
%User Line: rho0     = input.auxdata.rho0;
H = input.auxdata.H;
%User Line: H        = input.auxdata.H;
S = input.auxdata.S;
%User Line: S        = input.auxdata.S;
mass = input.auxdata.mass;
%User Line: mass     = input.auxdata.mass;
altitude.dV = rad.dV;
altitude.f = rad.f - input.auxdata.Re;
%User Line: altitude = rad - input.auxdata.Re;
cada1f1dV = cd1.f.*aoa.dV;
cada1f1 = cd1.f*aoa.f;
cada1f2dV = cada1f1dV;
cada1f2 = cd0.f + cada1f1;
cada1f3dV = 2.*aoa.f.^(2-1).*aoa.dV;
cada1f3 = aoa.f.^2;
cada1f4dV = cd2.f.*cada1f3dV;
cada1f4 = cd2.f*cada1f3;
cada1td1 = cada1f2dV;
cada1td1 = cada1td1 + cada1f4dV;
CD.dV = cada1td1;
CD.f = cada1f2 + cada1f4;
%User Line: CD       = cd0+cd1*aoa+cd2*aoa.^2;
cada1f1dV = -altitude.dV;
cada1f1 = uminus(altitude.f);
cada1f2dV = cada1f1dV./H;
cada1f2 = cada1f1/H;
cada1f3dV = exp(cada1f2).*cada1f2dV;
cada1f3 = exp(cada1f2);
rho.dV = rho0.*cada1f3dV;
rho.f = rho0*cada1f3;
%User Line: rho      = rho0*exp(-altitude/H);
cada1f1dV = cl1.f.*aoa.dV;
cada1f1 = cl1.f*aoa.f;
CL.dV = cada1f1dV;
CL.f = cl0.f + cada1f1;
%User Line: CL       = cl0+cl1*aoa;
cada1f1dV = 0.5.*rho.dV;
cada1f1 = 0.5*rho.f;
cada1f2dV = 2.*v.f.^(2-1).*v.dV;
cada1f2 = v.f.^2;
cada1td1 = zeros(size(cada1f1dV,1),2);
cada1td1(:,1) = cada1f2.*cada1f1dV;
cada1td1(:,2) = cada1td1(:,2) + cada1f1.*cada1f2dV;
q.dV = cada1td1;
q.f = cada1f1.*cada1f2;
%User Line: q        = 0.5*rho.*v.^2;
cada1f1dV = S.*q.dV;
cada1f1 = q.f*S;
cada1tf1 = CD.f(:,Gator1Data.Index1);
cada1td1 = zeros(size(cada1f1dV,1),3);
cada1td1(:,Gator1Data.Index2) = cada1tf1.*cada1f1dV;
cada1td1(:,3) = cada1td1(:,3) + cada1f1.*CD.dV;
cada1f2dV = cada1td1;
cada1f2 = cada1f1.*CD.f;
D.dV = cada1f2dV./mass;
D.f = cada1f2/mass;
%User Line: D        = q.*S.*CD./mass;
cada1f1dV = S.*q.dV;
cada1f1 = q.f*S;
cada1tf1 = CL.f(:,Gator1Data.Index3);
cada1td1 = zeros(size(cada1f1dV,1),3);
cada1td1(:,Gator1Data.Index4) = cada1tf1.*cada1f1dV;
cada1td1(:,3) = cada1td1(:,3) + cada1f1.*CL.dV;
cada1f2dV = cada1td1;
cada1f2 = cada1f1.*CL.f;
L.dV = cada1f2dV./mass;
L.f = cada1f2/mass;
%User Line: L        = q.*S.*CL./mass;
cada1f1dV = 2.*rad.f.^(2-1).*rad.dV;
cada1f1 = rad.f.^2;
gravity.dV = -mu./cada1f1.^2.*cada1f1dV;
gravity.f = mu./cada1f1;
%User Line: gravity  = mu./rad.^2;
%User Line: % ---------------------------------------------------%
%User Line: % ---- Evaluate Right-Hand Side of the Dynamics ---- %
%User Line: % ---------------------------------------------------%
cada1f1dV = cos(fpa.f).*fpa.dV;
cada1f1 = sin(fpa.f);
cada1td1 = zeros(size(v.dV,1),2);
cada1td1(:,1) = cada1f1.*v.dV;
cada1td1(:,2) = cada1td1(:,2) + v.f.*cada1f1dV;
raddot.dV = cada1td1;
raddot.f = v.f.*cada1f1;
%User Line: raddot = v.*sin(fpa);
cada1f1dV = -sin(fpa.f).*fpa.dV;
cada1f1 = cos(fpa.f);
cada1td1 = zeros(size(v.dV,1),2);
cada1td1(:,1) = cada1f1.*v.dV;
cada1td1(:,2) = cada1td1(:,2) + v.f.*cada1f1dV;
cada1f2dV = cada1td1;
cada1f2 = v.f.*cada1f1;
cada1f3dV = cos(azi.f).*azi.dV;
cada1f3 = sin(azi.f);
cada1tf1 = cada1f3(:,Gator1Data.Index5);
cada1td1 = zeros(size(cada1f2dV,1),3);
cada1td1(:,Gator1Data.Index6) = cada1tf1.*cada1f2dV;
cada1td1(:,3) = cada1td1(:,3) + cada1f2.*cada1f3dV;
cada1f4dV = cada1td1;
cada1f4 = cada1f2.*cada1f3;
cada1f5dV = -sin(lat.f).*lat.dV;
cada1f5 = cos(lat.f);
cada1td1 = zeros(size(rad.dV,1),2);
cada1td1(:,1) = cada1f5.*rad.dV;
cada1td1(:,2) = cada1td1(:,2) + rad.f.*cada1f5dV;
cada1f6dV = cada1td1;
cada1f6 = rad.f.*cada1f5;
cada1tf1 = cada1f6(:,Gator1Data.Index7);
cada1td1 = zeros(size(cada1f4dV,1),5);
cada1td1(:,Gator1Data.Index8) = cada1f4dV./cada1tf1;
cada1tf1 = cada1f4(:,Gator1Data.Index9);
cada1tf2 = cada1f6(:,Gator1Data.Index10);
cada1td1(:,Gator1Data.Index11) = cada1td1(:,Gator1Data.Index11) + -cada1tf1./cada1tf2.^2.*cada1f6dV;
londot.dV = cada1td1;
londot.f = cada1f4./cada1f6;
%User Line: londot = v.*cos(fpa).*sin(azi)./(rad.*cos(lat));
cada1f1dV = -sin(fpa.f).*fpa.dV;
cada1f1 = cos(fpa.f);
cada1td1 = zeros(size(v.dV,1),2);
cada1td1(:,1) = cada1f1.*v.dV;
cada1td1(:,2) = cada1td1(:,2) + v.f.*cada1f1dV;
cada1f2dV = cada1td1;
cada1f2 = v.f.*cada1f1;
cada1f3dV = -sin(azi.f).*azi.dV;
cada1f3 = cos(azi.f);
cada1tf1 = cada1f3(:,Gator1Data.Index12);
cada1td1 = zeros(size(cada1f2dV,1),3);
cada1td1(:,Gator1Data.Index13) = cada1tf1.*cada1f2dV;
cada1td1(:,3) = cada1td1(:,3) + cada1f2.*cada1f3dV;
cada1f4dV = cada1td1;
cada1f4 = cada1f2.*cada1f3;
cada1tf1 = rad.f(:,Gator1Data.Index14);
cada1td1 = zeros(size(cada1f4dV,1),4);
cada1td1(:,Gator1Data.Index15) = cada1f4dV./cada1tf1;
cada1td1(:,1) = cada1td1(:,1) + -cada1f4./rad.f.^2.*rad.dV;
latdot.dV = cada1td1;
latdot.f = cada1f4./rad.f;
%User Line: latdot = v.*cos(fpa).*cos(azi)./rad;
cada1f1dV = -D.dV;
cada1f1 = uminus(D.f);
cada1f2dV = cos(fpa.f).*fpa.dV;
cada1f2 = sin(fpa.f);
cada1td1 = zeros(size(gravity.dV,1),2);
cada1td1(:,1) = cada1f2.*gravity.dV;
cada1td1(:,2) = cada1td1(:,2) + gravity.f.*cada1f2dV;
cada1f3dV = cada1td1;
cada1f3 = gravity.f.*cada1f2;
cada1td1 = zeros(size(cada1f1dV,1),4);
cada1td1(:,Gator1Data.Index16) = cada1f1dV;
cada1td1(:,Gator1Data.Index17) = cada1td1(:,Gator1Data.Index17) + -cada1f3dV;
vdot.dV = cada1td1;
vdot.f = cada1f1 - cada1f3;
%User Line: vdot   = -D-gravity.*sin(fpa);
cada1f1dV = -sin(bank.f).*bank.dV;
cada1f1 = cos(bank.f);
cada1tf1 = cada1f1(:,Gator1Data.Index18);
cada1td1 = zeros(size(L.dV,1),4);
cada1td1(:,Gator1Data.Index19) = cada1tf1.*L.dV;
cada1td1(:,4) = cada1td1(:,4) + L.f.*cada1f1dV;
cada1f2dV = cada1td1;
cada1f2 = L.f.*cada1f1;
cada1f3dV = -sin(fpa.f).*fpa.dV;
cada1f3 = cos(fpa.f);
cada1f4dV = 2.*v.f.^(2-1).*v.dV;
cada1f4 = v.f.^2;
cada1td1 = zeros(size(cada1f4dV,1),2);
cada1td1(:,2) = cada1f4dV./rad.f;
cada1td1(:,1) = cada1td1(:,1) + -cada1f4./rad.f.^2.*rad.dV;
cada1f5dV = cada1td1;
cada1f5 = cada1f4./rad.f;
cada1td1 = zeros(size(gravity.dV,1),2);
cada1td1(:,1) = gravity.dV;
cada1td1 = cada1td1 + -cada1f5dV;
cada1f6dV = cada1td1;
cada1f6 = gravity.f - cada1f5;
cada1td1 = zeros(size(cada1f3dV,1),3);
cada1td1(:,3) = cada1f6.*cada1f3dV;
cada1tf1 = cada1f3(:,Gator1Data.Index20);
cada1td1(:,Gator1Data.Index21) = cada1td1(:,Gator1Data.Index21) + cada1tf1.*cada1f6dV;
cada1f7dV = cada1td1;
cada1f7 = cada1f3.*cada1f6;
cada1td1 = zeros(size(cada1f2dV,1),5);
cada1td1(:,Gator1Data.Index22) = cada1f2dV;
cada1td1(:,Gator1Data.Index23) = cada1td1(:,Gator1Data.Index23) + -cada1f7dV;
cada1f8dV = cada1td1;
cada1f8 = cada1f2 - cada1f7;
cada1tf1 = v.f(:,Gator1Data.Index24);
cada1td1 = cada1f8dV./cada1tf1;
cada1td1(:,2) = cada1td1(:,2) + -cada1f8./v.f.^2.*v.dV;
fpadot.dV = cada1td1;
fpadot.f = cada1f8./v.f;
%User Line: fpadot = (L.*cos(bank)-cos(fpa).*(gravity-v.^2./rad))./v;
cada1f1dV = cos(bank.f).*bank.dV;
cada1f1 = sin(bank.f);
cada1tf1 = cada1f1(:,Gator1Data.Index25);
cada1td1 = zeros(size(L.dV,1),4);
cada1td1(:,Gator1Data.Index26) = cada1tf1.*L.dV;
cada1td1(:,4) = cada1td1(:,4) + L.f.*cada1f1dV;
cada1f2dV = cada1td1;
cada1f2 = L.f.*cada1f1;
cada1f3dV = -sin(fpa.f).*fpa.dV;
cada1f3 = cos(fpa.f);
cada1tf1 = cada1f3(:,Gator1Data.Index27);
cada1td1 = zeros(size(cada1f2dV,1),5);
cada1td1(:,Gator1Data.Index28) = cada1f2dV./cada1tf1;
cada1td1(:,3) = cada1td1(:,3) + -cada1f2./cada1f3.^2.*cada1f3dV;
cada1f4dV = cada1td1;
cada1f4 = cada1f2./cada1f3;
cada1f5dV = 2.*v.f.^(2-1).*v.dV;
cada1f5 = v.f.^2;
cada1f6dV = -sin(fpa.f).*fpa.dV;
cada1f6 = cos(fpa.f);
cada1td1 = zeros(size(cada1f5dV,1),2);
cada1td1(:,1) = cada1f6.*cada1f5dV;
cada1td1(:,2) = cada1td1(:,2) + cada1f5.*cada1f6dV;
cada1f7dV = cada1td1;
cada1f7 = cada1f5.*cada1f6;
cada1f8dV = cos(azi.f).*azi.dV;
cada1f8 = sin(azi.f);
cada1tf1 = cada1f8(:,Gator1Data.Index29);
cada1td1 = zeros(size(cada1f7dV,1),3);
cada1td1(:,Gator1Data.Index30) = cada1tf1.*cada1f7dV;
cada1td1(:,3) = cada1td1(:,3) + cada1f7.*cada1f8dV;
cada1f9dV = cada1td1;
cada1f9 = cada1f7.*cada1f8;
cada1f10dV = sec(lat.f).^2.*lat.dV;
cada1f10 = tan(lat.f);
cada1tf1 = cada1f10(:,Gator1Data.Index31);
cada1td1 = zeros(size(cada1f9dV,1),4);
cada1td1(:,Gator1Data.Index32) = cada1tf1.*cada1f9dV;
cada1td1(:,1) = cada1td1(:,1) + cada1f9.*cada1f10dV;
cada1f11dV = cada1td1;
cada1f11 = cada1f9.*cada1f10;
cada1tf1 = rad.f(:,Gator1Data.Index33);
cada1td1 = zeros(size(cada1f11dV,1),5);
cada1td1(:,Gator1Data.Index34) = cada1f11dV./cada1tf1;
cada1td1(:,1) = cada1td1(:,1) + -cada1f11./rad.f.^2.*rad.dV;
cada1f12dV = cada1td1;
cada1f12 = cada1f11./rad.f;
cada1td1 = zeros(size(cada1f4dV,1),7);
cada1td1(:,Gator1Data.Index35) = cada1f4dV;
cada1td1(:,Gator1Data.Index36) = cada1td1(:,Gator1Data.Index36) + cada1f12dV;
cada1f13dV = cada1td1;
cada1f13 = cada1f4 + cada1f12;
cada1tf1 = v.f(:,Gator1Data.Index37);
cada1td1 = cada1f13dV./cada1tf1;
cada1td1(:,3) = cada1td1(:,3) + -cada1f13./v.f.^2.*v.dV;
azidot.dV = cada1td1;
azidot.f = cada1f13./v.f;
%User Line: azidot = (L.*sin(bank)./cos(fpa)+v.^2.*cos(fpa).*sin(azi).*tan(lat)./rad)./v;
cada1td1 = zeros(size(raddot.f,1),27);
cada1td1(:,Gator1Data.Index38) = raddot.dV;
cada1td1(:,Gator1Data.Index39) = londot.dV;
cada1td1(:,Gator1Data.Index40) = latdot.dV;
cada1td1(:,Gator1Data.Index41) = vdot.dV;
cada1td1(:,Gator1Data.Index42) = fpadot.dV;
cada1td1(:,Gator1Data.Index43) = azidot.dV;
phaseout.dynamics.dV = cada1td1;
phaseout.dynamics.f = [raddot.f londot.f latdot.f vdot.f fpadot.f azidot.f];
%User Line: phaseout.dynamics  = [raddot, londot, latdot, vdot, fpadot, azidot];
phaseout.dynamics.dV_size = [6,9];
phaseout.dynamics.dV_location = Gator1Data.Index44;
end


function ADiGator_LoadData()
global ADiGator_rlvEntryContinuousADiGatorGrd
ADiGator_rlvEntryContinuousADiGatorGrd = load('rlvEntryContinuousADiGatorGrd.mat');
return
end